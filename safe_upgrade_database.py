import sqlite3
from datetime import datetime
import hashlib

def upgrade_database():
    """Database'i g√ºvenli ≈üekilde g√ºncelle - Render.com i√ßin"""
    db_path = 'stok_takip.db'
    print(f"üöÄ Database upgrade ba≈ülatƒ±lƒ±yor: {db_path}")
    print(f"‚è∞ Zaman: {datetime.now()}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    print("‚úÖ Database baƒülantƒ±sƒ± kuruldu")
    
    try:
        # Foreign key desteƒüini a√ß
        cursor.execute("PRAGMA foreign_keys = ON")
        
        print("üìã Temel tablolarƒ± olu≈üturuluyor...")
        
        # Depo tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS depo (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                depo_adi VARCHAR(100) NOT NULL UNIQUE,
                adres TEXT,
                telefon VARCHAR(20),
                email VARCHAR(100),
                aktif BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # √úr√ºn tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS urun (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                urun_adi VARCHAR(200) NOT NULL,
                jant_ebati VARCHAR(50),
                lastik_ebati VARCHAR(100),
                barkod VARCHAR(100) UNIQUE,
                desi DECIMAL(8,2) DEFAULT 0.00,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Kullanƒ±cƒ± tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS kullanici (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                kullanici_adi VARCHAR(50) NOT NULL UNIQUE,
                email VARCHAR(100) UNIQUE,
                sifre_hash VARCHAR(255) NOT NULL,
                tam_ad VARCHAR(100),
                rol VARCHAR(20) DEFAULT 'user',
                aktif BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME
            )
        ''')
        
        # √úr√ºn stok tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS urun_stok (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                urun_id INTEGER NOT NULL,
                depo_id INTEGER NOT NULL,
                miktar INTEGER DEFAULT 0,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (urun_id) REFERENCES urun (id),
                FOREIGN KEY (depo_id) REFERENCES depo (id),
                UNIQUE(urun_id, depo_id)
            )
        ''')
        
        # ƒ∞≈ülem ge√ßmi≈üi tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS islem_gecmisi (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tarih DATETIME DEFAULT CURRENT_TIMESTAMP,
                islem_tipi VARCHAR(50),
                urun_id INTEGER,
                depo_id INTEGER,
                hedef_depo_id INTEGER,
                eski_deger VARCHAR(100),
                yeni_deger VARCHAR(100),
                urun_bilgisi TEXT,
                kullanici_id INTEGER,
                kullanici_adi VARCHAR(50),
                platform_id INTEGER,
                musteri_id INTEGER,
                kargo_bilgisi TEXT,
                takip_no VARCHAR(100),
                teslimat_durumu VARCHAR(50) DEFAULT 'HAZIRLANYOR',
                FOREIGN KEY (urun_id) REFERENCES urun (id),
                FOREIGN KEY (depo_id) REFERENCES depo (id),
                FOREIGN KEY (kullanici_id) REFERENCES kullanici (id),
                FOREIGN KEY (platform_id) REFERENCES platform (id),
                FOREIGN KEY (musteri_id) REFERENCES musteri (id)
            )
        ''')
        
        # Kargo firmasi tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS kargo_firmasi (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                firma_adi VARCHAR(100) NOT NULL UNIQUE,
                aktif BOOLEAN DEFAULT 1,
                olu≈üturma_tarihi DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Stok √ßƒ±kƒ±≈ü fi≈üi tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stok_cikis_fis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fis_no VARCHAR(50) NOT NULL UNIQUE,
                tarih DATETIME DEFAULT CURRENT_TIMESTAMP,
                depo_id INTEGER NOT NULL,
                aciklama TEXT,
                toplam_urun_adedi INTEGER DEFAULT 0,
                toplam_adet INTEGER DEFAULT 0,
                kullanici_id INTEGER,
                kullanici_adi VARCHAR(50),
                durum VARCHAR(20) DEFAULT 'TAMAMLANDI',
                FOREIGN KEY (depo_id) REFERENCES depo (id),
                FOREIGN KEY (kullanici_id) REFERENCES kullanici (id)
            )
        ''')
        
        # Stok √ßƒ±kƒ±≈ü fi≈üi detay tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stok_cikis_fis_detay (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fis_id INTEGER NOT NULL,
                urun_id INTEGER NOT NULL,
                urun_adi VARCHAR(200),
                cikis_adedi INTEGER NOT NULL,
                birim_desi DECIMAL(8,2),
                toplam_desi DECIMAL(8,2),
                kargo_firmasi_id INTEGER,
                FOREIGN KEY (fis_id) REFERENCES stok_cikis_fis (id),
                FOREIGN KEY (urun_id) REFERENCES urun (id),
                FOREIGN KEY (kargo_firmasi_id) REFERENCES kargo_firmasi (id)
            )
        ''')
        
        # Platform tablosu (E-ticaret platformlarƒ±)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS platform (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                platform_adi VARCHAR(100) NOT NULL UNIQUE,
                platform_tipi VARCHAR(50) DEFAULT 'E-TICARET',
                komisyon_orani DECIMAL(5,2) DEFAULT 0.00,
                api_bilgileri TEXT,
                aktif BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # M√º≈üteri tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS musteri (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                musteri_adi VARCHAR(200) NOT NULL,
                musteri_tipi VARCHAR(50) DEFAULT 'BIREYSEL',
                telefon VARCHAR(20),
                email VARCHAR(100),
                adres TEXT,
                vergi_no VARCHAR(20),
                aktif BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Ayarlar tablosu
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS ayarlar (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                anahtar VARCHAR(100) NOT NULL UNIQUE,
                deger TEXT,
                aciklama TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        print("üì¶ Varsayƒ±lan veriler olu≈üturuluyor...")
        
        # Varsayƒ±lan admin kullanƒ±cƒ±
        admin_password = "admin123"
        password_hash = hashlib.sha256(admin_password.encode()).hexdigest()
        
        cursor.execute('''
            INSERT OR IGNORE INTO kullanici 
            (kullanici_adi, email, sifre_hash, tam_ad, rol, aktif, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', ('admin', 'admin@bikestock.com', password_hash, 'Sistem Y√∂neticisi', 'admin', 1, datetime.now()))
        
        # Varsayƒ±lan depo
        cursor.execute('''
            INSERT OR IGNORE INTO depo (depo_adi, aktif)
            VALUES ('Ana Depo', 1)
        ''')
        
        # Varsayƒ±lan platformlar
        platformlar = [
            ('Trendyol', 'E-TICARET', 15.00),
            ('Hepsiburada', 'E-TICARET', 12.00),
            ('N11', 'E-TICARET', 8.00),
            ('Amazon', 'E-TICARET', 10.00),
            ('GittiGidiyor', 'E-TICARET', 6.00),
            ('Ciceksepeti', 'E-TICARET', 8.00),
            ('Maƒüaza Satƒ±≈ü', 'FIZIKSEL', 0.00),
            ('Bayi Satƒ±≈ü', 'TOPTAN', 0.00),
            ('Diƒüer', 'DIGER', 0.00)
        ]
        
        for platform_adi, platform_tipi, komisyon in platformlar:
            cursor.execute('''
                INSERT OR IGNORE INTO platform (platform_adi, platform_tipi, komisyon_orani, aktif)
                VALUES (?, ?, ?, 1)
            ''', (platform_adi, platform_tipi, komisyon))
        
        # Varsayƒ±lan m√º≈üteriler
        musteriler = [
            ('Bireysel M√º≈üteri', 'BIREYSEL'),
            ('Kurumsal M√º≈üteri', 'KURUMSAL'),
            ('Bayi', 'BAYI'),
            ('Toptan M√º≈üteri', 'TOPTAN')
        ]
        
        for musteri_adi, musteri_tipi in musteriler:
            cursor.execute('''
                INSERT OR IGNORE INTO musteri (musteri_adi, musteri_tipi, aktif)
                VALUES (?, ?, 1)
            ''', (musteri_adi, musteri_tipi))
        
        # Varsayƒ±lan kargo firmalarƒ±
        kargo_firmalari = [
            'Yurti√ßi Kargo', 'Aras Kargo', 'MNG Kargo', 
            'PTT Kargo', 'UPS Kargo', 'S√ºrat Kargo'
        ]
        
        for firma in kargo_firmalari:
            cursor.execute('INSERT OR IGNORE INTO kargo_firmasi (firma_adi) VALUES (?)', (firma,))
        
        # Deƒüi≈üiklikleri kaydet
        
        print("üîÑ Eksik s√ºtunlar kontrol ediliyor ve ekleniyor...")
        
        # islem_gecmisi tablosuna eksik s√ºtunlarƒ± ekle
        try:
            # platform_id s√ºtununu kontrol et ve ekle
            cursor.execute("PRAGMA table_info(islem_gecmisi)")
            columns = [column[1] for column in cursor.fetchall()]

            if 'platform_id' not in columns:
                print("   + platform_id s√ºtunu ekleniyor...")
                cursor.execute('ALTER TABLE islem_gecmisi ADD COLUMN platform_id INTEGER')

            if 'musteri_id' not in columns:
                print("   + musteri_id s√ºtunu ekleniyor...")
                cursor.execute('ALTER TABLE islem_gecmisi ADD COLUMN musteri_id INTEGER')

            if 'kargo_bilgisi' not in columns:
                print("   + kargo_bilgisi s√ºtunu ekleniyor...")
                cursor.execute('ALTER TABLE islem_gecmisi ADD COLUMN kargo_bilgisi TEXT')

            if 'takip_no' not in columns:
                print("   + takip_no s√ºtunu ekleniyor...")
                cursor.execute('ALTER TABLE islem_gecmisi ADD COLUMN takip_no VARCHAR(100)')

            if 'teslimat_durumu' not in columns:
                print("   + teslimat_durumu s√ºtunu ekleniyor...")
                cursor.execute('ALTER TABLE islem_gecmisi ADD COLUMN teslimat_durumu VARCHAR(50) DEFAULT "HAZIRLANYOR"')

            print("‚úÖ ƒ∞≈ülem ge√ßmi≈üi tablosu g√ºncellendi!")

            # kargo_firmasi tablosuna kisa_adi s√ºtunu ekle
            cursor.execute("PRAGMA table_info(kargo_firmasi)")
            kargo_columns = [column[1] for column in cursor.fetchall()]
            if 'kisa_adi' not in kargo_columns:
                print("   + kargo_firmasi tablosuna kisa_adi s√ºtunu ekleniyor...")
                cursor.execute('ALTER TABLE kargo_firmasi ADD COLUMN kisa_adi VARCHAR(50)')

            # stok_cikis_fis tablosuna eksik s√ºtunlarƒ± ekle (√∂zellikle platform_id)
            try:
                cursor.execute("PRAGMA table_info(stok_cikis_fis)")
                f_columns = [col[1] for col in cursor.fetchall()]
                if 'platform_id' not in f_columns:
                    print("   + stok_cikis_fis tablosuna platform_id s√ºtunu ekleniyor...")
                    cursor.execute('ALTER TABLE stok_cikis_fis ADD COLUMN platform_id INTEGER')
                # Eƒüer gerektiƒüini d√º≈ü√ºn√ºrseniz, ileride burada musteri_id veya takip_no gibi s√ºtunlarƒ± da ekleyebilirsiniz
            except Exception as e:
                print(f"‚ö†Ô∏è stok_cikis_fis tablosu g√ºncellemesi sƒ±rasƒ±nda hata: {e}")

        except Exception as e:
            print(f"‚ö†Ô∏è ƒ∞≈ülem ge√ßmi≈üi veya kargo_firmasi tablosu g√ºncelleme hatasƒ±: {e}")
        
        conn.commit()
        
        print("‚úÖ Database upgrade ba≈üarƒ±yla tamamlandƒ±!")
        
        # Tablo sayƒ±sƒ±nƒ± kontrol et
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print(f"üìä Toplam tablo sayƒ±sƒ±: {len(tables)}")
        for table in tables:
            print(f"   - {table[0]}")
        
        print("üéâ Database upgrade ba≈üarƒ±yla tamamlandƒ±!")
            
    except Exception as e:
        print(f"‚ùå Database upgrade hatasƒ±: {e}")
        conn.rollback()
        raise e
    finally:
        conn.close()
        print("üîí Database baƒülantƒ±sƒ± kapatƒ±ldƒ±")

if __name__ == "__main__":
    print("üîß BikeStock Database Upgrade Script - Render.com")
    print("=" * 50)
    upgrade_database()